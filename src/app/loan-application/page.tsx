// app/loan-application/page.tsx
"use client";

import { useState, useRef } from "react";
import ReactPlayer from "react-player";
import Webcam from "react-webcam";

export default function LoanApplication() {
  const languageData = {
    en: {
      name: "English",
      questions: [
        "Hello! IтАЩm your AI Branch Manager. What is your monthly income?",
        "Great! How long have you been employed at your current job?",
        "What type of loan are you applying for? (e.g., personal, home, car)",
        "Do you have any existing loans? If yes, please specify the amount.",
        "Perfect! Now, please upload your Aadhaar, PAN, or income proof.",
      ],
      videoUrl: "https://youtu.be/YpPMwMnIF7w",
    },
    hi: {
      name: "Hindi",
      questions: [
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╢рд╛рдЦрд╛ рдкреНрд░рдмрдВрдзрдХ рд╣реВрдБред рдЖрдкрдХреА рдорд╛рд╕рд┐рдХ рдЖрдп рдХреНрдпрд╛ рд╣реИ?",
        "рдмрдврд╝рд┐рдпрд╛! рдЖрдк рдЕрдкрдиреА рд╡рд░реНрддрдорд╛рди рдиреМрдХрд░реА рдореЗрдВ рдХрд┐рддрдиреЗ рд╕рдордп рд╕реЗ рд╣реИрдВ?",
        "рдЖрдк рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХрд╛ рдЛрдг рд▓реЗрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? (рдЙрджрд╛рд╣рд░рдг: рд╡реНрдпрдХреНрддрд┐рдЧрдд, рдШрд░, рдХрд╛рд░)",
        "рдХреНрдпрд╛ рдЖрдкрдХреЗ рдкрд╛рд╕ рдХреЛрдИ рдореМрдЬреВрджрд╛ рдЛрдг рд╣реИ? рдпрджрд┐ рд╣рд╛рдБ, рддреЛ рд░рд╛рд╢рд┐ рдмрддрд╛рдПрдВред",
        "рдЙрддреНрддрдо! рдЕрдм рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЖрдзрд╛рд░, рдкреИрди, рдпрд╛ рдЖрдп рдкреНрд░рдорд╛рдг рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
      ],
      videoUrl: "https://youtu.be/YpPMwMnIF7w",
    },
    ta: {
      name: "Tamil",
      questions: [
        "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН AI роХро┐ро│рпИ роорпЗро▓ро╛ро│ро░рпН. роЙроЩрпНроХро│рпН рооро╛род ро╡ро░рпБрооро╛ройроорпН роОройрпНрой?",
        "роЪро┐ро▒рокрпНрокрпБ! роирпАроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп ро╡рпЗро▓рпИропро┐ро▓рпН роОро╡рпНро╡ро│ро╡рпБ роХро╛ро▓роорпН роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН?",
        "роирпАроЩрпНроХро│рпН роОроирпНрод ро╡роХрпИропро╛рой роХроЯройрпБроХрпНроХрпБ ро╡ро┐рогрпНрогрокрпНрокро┐роХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН? (роО.роХро╛., родройро┐рокрпНрокроЯрпНроЯ, ро╡рпАроЯрпБ, роХро╛ро░рпН)",
        "роЙроЩрпНроХро│ро┐роЯроорпН роПро▒рпНроХройро╡рпЗ роХроЯройрпНроХро│рпН роЙро│рпНро│ройро╡ро╛? роЖроорпН роОройро┐ро▓рпН, родрпКроХрпИропрпИ роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпНуАВ",
        "роЪро░ро┐ропро╛роХ! роЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпН роЖродро╛ро░рпН, рокро╛ройрпН, роЕро▓рпНро▓родрпБ ро╡ро░рпБрооро╛рой роЪро╛ройрпНро▒рпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпНуАВ",
      ],
      videoUrl: "https://youtu.be/YpPMwMnIF7w",
    },
  };

  const [currentStep, setCurrentStep] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [videoBlob, setVideoBlob] = useState<Blob | null>(null);
  const [documentImage, setDocumentImage] = useState<File | null>(null);
  const [extractedData, setExtractedData] = useState<any>(null);
  const [responses, setResponses] = useState<string[]>([]);
  const [result, setResult] = useState<string | null>(null);
  const [language, setLanguage] = useState<"en" | "hi" | "ta">("en");
  const webcamRef = useRef<Webcam>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);

  const currentLanguage = languageData[language];

  const handleNext = () => {
    if (currentStep < currentLanguage.questions.length - 1) {
      setResponses([...responses, "Sample response"]);
      setCurrentStep(currentStep + 1);
      setVideoBlob(null);
      setDocumentImage(null);
      setExtractedData(null);
    } else {
      evaluateEligibility();
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
      setVideoBlob(null);
      setDocumentImage(null);
      setExtractedData(null);
    }
  };

  const startRecording = () => {
    const stream = webcamRef.current?.stream;
    if (stream) {
      mediaRecorderRef.current = new MediaRecorder(stream);
      const chunks: Blob[] = [];
      mediaRecorderRef.current.ondataavailable = (e) => chunks.push(e.data);
      mediaRecorderRef.current.onstop = () => {
        const blob = new Blob(chunks, { type: "video/webm" });
        setVideoBlob(blob);
      };
      mediaRecorderRef.current.start();
      setIsRecording(true);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const handleDocumentUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setDocumentImage(file);
      
      setExtractedData({
        IdType: "PAN CARD",
        Name: "Devish Mittal",
        dob: "22-02-2004", 
        pan: "HJVPM4886F",
        income: "50000",
        employmentType: "Student", 
      });
    }
  };

  const evaluateEligibility = () => {
    const income = parseInt(extractedData?.income || "0");
    const employmentDuration = parseInt(responses[1] || "0");
    const existingLoans = parseInt(responses[3] || "0");

    if (income < 30000) {
      setResult(
        language === "en"
          ? "тЭМ Rejected: Income below minimum requirement (тВ╣30,000)."
          : language === "hi"
          ? "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд: рдЖрдп рдиреНрдпреВрдирддрдо рдЖрд╡рд╢реНрдпрдХрддрд╛ (тВ╣30,000) рд╕реЗ рдХрдо рд╣реИред"
          : "тЭМ роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: ро╡ро░рпБрооро╛ройроорпН роХрпБро▒рпИроирпНродрокроЯрпНроЪ родрпЗро╡рпИропрпИ ро╡ро┐роЯ роХрпБро▒рпИро╡рпБ (тВ╣30,000)."
      );
    } else if (employmentDuration < 1) {
      setResult(
        language === "en"
          ? "тЭМ Rejected: Employment duration too short (minimum 1 year)."
          : language === "hi"
          ? "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд: рд░реЛрдЬрдЧрд╛рд░ рдЕрд╡рдзрд┐ рдмрд╣реБрдд рдХрдо рд╣реИ (рдиреНрдпреВрдирддрдо 1 рд╡рд░реНрд╖)ред"
          : "тЭМ роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ роХро╛ро▓роорпН рооро┐роХроХрпН роХрпБро▒рпИро╡рпБ (роХрпБро▒рпИроирпНродрокроЯрпНроЪроорпН 1 роЖрогрпНроЯрпБ)."
      );
    } else if (existingLoans > income * 0.5) {
      setResult(
        language === "en"
          ? "тЭМ Rejected: Existing loans exceed 50% of income."
          : language === "hi"
          ? "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд: рдореМрдЬреВрджрд╛ рдЛрдг рдЖрдп рдХрд╛ 50% рд╕реЗ рдЕрдзрд┐рдХ рд╣реИрдВред"
          : "тЭМ роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: родро▒рпНрокрпЛродрпИроп роХроЯройрпНроХро│рпН ро╡ро░рпБрооро╛ройродрпНродро┐ройрпН 50% роР ро╡ро┐роЯ роЕродро┐роХроорпН."
      );
    } else if (!extractedData) {
      setResult(
        language === "en"
          ? "ЁЯФД More Info Needed: Please upload valid documents."
          : language === "hi"
          ? "ЁЯФД рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП: рдХреГрдкрдпрд╛ рд╡реИрдз рджрд╕реНрддрд╛рд╡реЗрдЬ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред"
          : "ЁЯФД роорпЗро▓рпБроорпН родроХро╡ро▓рпН родрпЗро╡рпИ: роЪро░ро┐ропро╛рой роЖро╡рогроЩрпНроХро│рпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН."
      );
    } else {
      setResult(
        language === "en"
          ? "тЬЕ Approved: Congratulations, youтАЩre eligible for a loan!"
          : language === "hi"
          ? "тЬЕ рд╕реНрд╡реАрдХреГрдд: рдмрдзрд╛рдИ рд╣реЛ, рдЖрдк рдЛрдг рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рд╣реИрдВ!"
          : "тЬЕ роЕроЩрпНроХрпАроХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН, роирпАроЩрпНроХро│рпН роХроЯройрпБроХрпНроХрпБ родроХрпБродро┐ропро╛ройро╡ро░рпН!"
      );
    }
  };

  if (result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-gray-100 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl shadow-lg p-8 max-w-lg w-full text-center transform transition-all duration-300 scale-100 hover:scale-105">
          <h1 className="text-3xl font-bold text-blue-700 mb-6">
            {language === "en"
              ? "Loan Application Result"
              : language === "hi"
              ? "рдЛрдг рдЖрд╡реЗрджрди рдкрд░рд┐рдгрд╛рдо"
              : "роХроЯройрпН ро╡ро┐рогрпНрогрокрпНрок роорпБроЯро┐ро╡рпБ"}
          </h1>
          <p className="text-xl text-gray-800 mb-8">{result}</p>
          <button
            onClick={() => {
              setResult(null);
              setCurrentStep(0);
              setResponses([]);
            }}
            className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-full shadow-md hover:bg-blue-700 transition-all duration-200"
          >
            {language === "en"
              ? "Start Over"
              : language === "hi"
              ? "рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ"
              : "роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХрпБ"}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-gray-100 flex flex-col items-center p-6">
      {/* Header */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-extrabold text-blue-700 tracking-tight">
          {language === "en"
            ? "AI Branch Manager"
            : language === "hi"
            ? "AI рд╢рд╛рдЦрд╛ рдкреНрд░рдмрдВрдзрдХ"
            : "AI роХро┐ро│рпИ роорпЗро▓ро╛ро│ро░рпН"}
        </h1>
        <p className="text-lg text-gray-600 mt-2">
          {language === "en"
            ? "Your virtual loan assistant"
            : language === "hi"
            ? "рдЖрдкрдХрд╛ рдЖрднрд╛рд╕реА рдЛрдг рд╕рд╣рд╛рдпрдХ"
            : "роЙроЩрпНроХро│рпН роорпЖропрпНроиро┐роХро░рпН роХроЯройрпН роЙродро╡ро┐ропро╛ро│ро░рпН"}
        </p>
      </div>

      {/* Language Selector */}
      <div className="mb-6 flex items-center space-x-4">
        <label className="text-gray-700 font-medium">
          {language === "en"
            ? "Language:"
            : language === "hi"
            ? "рднрд╛рд╖рд╛:"
            : "роорпКро┤ро┐:"}
        </label>
        <select
          value={language}
          onChange={(e) => setLanguage(e.target.value as "en" | "hi" | "ta")}
          className="p-2 bg-white border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
        >
          <option value="en">English</option>
          <option value="hi">Hindi</option>
          <option value="ta">Tamil</option>
        </select>
      </div>

      {/* Main Content */}
      <div className="w-full max-w-4xl bg-white rounded-xl shadow-lg p-8">
        {/* Video Player */}
        <div className="mb-8">
          <div className="relative pt-[56.25%] rounded-lg overflow-hidden shadow-md">
            <ReactPlayer
              url={currentLanguage.videoUrl}
              width="100%"
              height="100%"
              controls={true}
              className="absolute top-0 left-0"
            />
          </div>
        </div>

        {/* Question and Interaction */}
        <div className="space-y-6">
          <p className="text-xl text-gray-800 font-medium">
            {currentLanguage.questions[currentStep]}
          </p>

          {currentStep < currentLanguage.questions.length - 1 ? (
            <>
              {/* Webcam */}
              <div className="rounded-lg overflow-hidden shadow-md">
                <Webcam
                  audio={true}
                  ref={webcamRef}
                  width="100%"
                  videoConstraints={{ width: 640, height: 480 }}
                />
              </div>

              {/* Recording Controls */}
              {!videoBlob ? (
                <div className="flex space-x-4">
                  <button
                    onClick={startRecording}
                    disabled={isRecording}
                    className="flex-1 px-4 py-3 bg-red-600 text-white font-semibold rounded-lg shadow-md hover:bg-red-700 disabled:bg-red-300 transition-all duration-200"
                  >
                    {isRecording
                      ? language === "en"
                        ? "Recording..."
                        : language === "hi"
                        ? "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ..."
                        : "рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпБроХро┐ро▒родрпБ..."
                      : language === "en"
                      ? "Start Recording"
                      : language === "hi"
                      ? "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ рдХрд░реЗрдВ"
                      : "рокродро┐ро╡рпИ родрпКроЯроЩрпНроХрпБ"}
                  </button>
                  <button
                    onClick={stopRecording}
                    disabled={!isRecording}
                    className="flex-1 px-4 py-3 bg-gray-600 text-white font-semibold rounded-lg shadow-md hover:bg-gray-700 disabled:bg-gray-300 transition-all duration-200"
                  >
                    {language === "en"
                      ? "Stop Recording"
                      : language === "hi"
                      ? "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд░реЛрдХреЗрдВ"
                      : "рокродро┐ро╡рпИ роиро┐ро▒рпБродрпНродрпБ"}
                  </button>
                </div>
              ) : (
                <div className="space-y-4">
                  <video
                    src={URL.createObjectURL(videoBlob)}
                    controls
                    className="w-full rounded-lg shadow-md"
                  />
                  <button
                    onClick={() => setVideoBlob(null)}
                    className="w-full px-4 py-3 bg-yellow-600 text-white font-semibold rounded-lg shadow-md hover:bg-yellow-700 transition-all duration-200"
                  >
                    {language === "en"
                      ? "Re-record"
                      : language === "hi"
                      ? "рдлрд┐рд░ рд╕реЗ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ"
                      : "роорпАрогрпНроЯрпБроорпН рокродро┐ро╡рпБ роЪрпЖропрпН"}
                  </button>
                </div>
              )}
            </>
          ) : (
            <>
              {/* Document Upload */}
              <div className="space-y-4">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleDocumentUpload}
                  className="block w-full text-gray-700 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:bg-blue-600 file:text-white file:font-semibold hover:file:bg-blue-700 transition"
                />
                {documentImage && (
                  <img
                    src={URL.createObjectURL(documentImage)}
                    alt="Uploaded Document"
                    className="w-full max-h-80 object-contain rounded-lg shadow-md"
                  />
                )}
                {extractedData && (
  <div className="bg-gray-50 p-4 rounded-lg shadow-inner">
    <h3 className="text-lg font-semibold text-blue-700 mb-2">
      {language === "en"
        ? "Extracted Data:"
        : language === "hi"
        ? "рдирд┐рдХрд╛рд▓рд╛ рдЧрдпрд╛ рдбреЗрдЯрд╛:"
        : "рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ родро░ро╡рпБ:"}
    </h3>
    <p className="text-gray-700">
      {language === "en"
        ? "ID Type:"
        : language === "hi"
        ? "рдЖрдИрдбреА рдкреНрд░рдХрд╛рд░:"
        : "роЕроЯрпИропро╛ро│ ро╡роХрпИ:"}{" "}
      {extractedData.IdType}
    </p>
    <p className="text-gray-700">
      {language === "en"
        ? "Name:"
        : language === "hi"
        ? "рдирд╛рдо:"
        : "рокрпЖропро░рпН:"}{" "}
      {extractedData.Name}
    </p>
    <p className="text-gray-700">
      {language === "en"
        ? "DOB:"
        : language === "hi"
        ? "рдЬрдиреНрдо рддрд┐рдерд┐:"
        : "рокро┐ро▒роирпНрод родрпЗродро┐:"}{" "}
      {extractedData.dob}
    </p>
    <p className="text-gray-700">
      {language === "en"
        ? "PAN:"
        : language === "hi"
        ? "рдкреИрди:"
        : "рокро╛ройрпН:"}{" "}
      {extractedData.pan}
    </p>
    <p className="text-gray-700">
      {language === "en"
        ? "Income:"
        : language === "hi"
        ? "рдЖрдп:"
        : "ро╡ро░рпБрооро╛ройроорпН:"}{" "}
      тВ╣{extractedData.income}
    </p>
    <p className="text-gray-700">
      {language === "en"
        ? "Employment Type:"
        : language === "hi"
        ? "рд░реЛрдЬрдЧрд╛рд░ рдкреНрд░рдХрд╛рд░:"
        : "ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ ро╡роХрпИ:"}{" "}
      {extractedData.employmentType}
    </p>
  </div>
)}
              </div>
            </>
          )}

          {/* Navigation */}
          <div className="flex justify-between mt-6">
            <button
              onClick={handleBack}
              disabled={currentStep === 0}
              className="px-6 py-3 bg-gray-500 text-white font-semibold rounded-lg shadow-md hover:bg-gray-600 disabled:bg-gray-300 transition-all duration-200"
            >
              {language === "en"
                ? "Back"
                : language === "hi"
                ? "рдкреАрдЫреЗ"
                : "рокро┐ройрпНройро╛ро▓рпН"}
            </button>
            <button
              onClick={handleNext}
              disabled={
                currentStep === currentLanguage.questions.length - 1
                  ? !documentImage
                  : !videoBlob
              }
              className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 disabled:bg-blue-300 transition-all duration-200"
            >
              {currentStep === currentLanguage.questions.length - 1
                ? language === "en"
                  ? "Submit"
                  : language === "hi"
                  ? "рдЬрдорд╛ рдХрд░реЗрдВ"
                  : "роЪрооро░рпНрокрпНрокро┐"
                : language === "en"
                ? "Next"
                : language === "hi"
                ? "рдЕрдЧрд▓рд╛"
                : "роЕроЯрпБродрпНродрпБ"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}