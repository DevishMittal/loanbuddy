// app/loan-application/page.tsx
"use client";

import { useState, useRef } from "react";
import ReactPlayer from "react-player";
import Webcam from "react-webcam";

export default function LoanApplication() {
  // Language data (expand with real translations and video URLs)
  const languageData = {
    en: {
      name: "English",
      questions: [
        "Hello! IтАЩm your AI Branch Manager. What is your monthly income?",
        "Great! How long have you been employed at your current job?",
        "What type of loan are you applying for? (e.g., personal, home, car)",
        "Do you have any existing loans? If yes, please specify the amount.",
        "Perfect! Now, please upload your Aadhaar, PAN, or income proof.",
      ],
      videoUrl: "https://www.youtube.com/watch?v=ysz5S6PUM-U", // Placeholder
    },
    hi: {
      name: "Hindi",
      questions: [
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╢рд╛рдЦрд╛ рдкреНрд░рдмрдВрдзрдХ рд╣реВрдБред рдЖрдкрдХреА рдорд╛рд╕рд┐рдХ рдЖрдп рдХреНрдпрд╛ рд╣реИ?",
        "рдмрдврд╝рд┐рдпрд╛! рдЖрдк рдЕрдкрдиреА рд╡рд░реНрддрдорд╛рди рдиреМрдХрд░реА рдореЗрдВ рдХрд┐рддрдиреЗ рд╕рдордп рд╕реЗ рд╣реИрдВ?",
        "рдЖрдк рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХрд╛ рдЛрдг рд▓реЗрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? (рдЙрджрд╛рд╣рд░рдг: рд╡реНрдпрдХреНрддрд┐рдЧрдд, рдШрд░, рдХрд╛рд░)",
        "рдХреНрдпрд╛ рдЖрдкрдХреЗ рдкрд╛рд╕ рдХреЛрдИ рдореМрдЬреВрджрд╛ рдЛрдг рд╣реИ? рдпрджрд┐ рд╣рд╛рдБ, рддреЛ рд░рд╛рд╢рд┐ рдмрддрд╛рдПрдВред",
        "рдЙрддреНрддрдо! рдЕрдм рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЖрдзрд╛рд░, рдкреИрди, рдпрд╛ рдЖрдп рдкреНрд░рдорд╛рдг рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред",
      ],
      videoUrl: "https://www.youtube.com/watch?v=ysz5S6PUM-U", // Same placeholder
    },
    ta: {
      name: "Tamil",
      questions: [
        "ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН AI роХро┐ро│рпИ роорпЗро▓ро╛ро│ро░рпН. роЙроЩрпНроХро│рпН рооро╛род ро╡ро░рпБрооро╛ройроорпН роОройрпНрой?",
        "роЪро┐ро▒рокрпНрокрпБ! роирпАроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп ро╡рпЗро▓рпИропро┐ро▓рпН роОро╡рпНро╡ро│ро╡рпБ роХро╛ро▓роорпН роЗро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН?",
        "роирпАроЩрпНроХро│рпН роОроирпНрод ро╡роХрпИропро╛рой роХроЯройрпБроХрпНроХрпБ ро╡ро┐рогрпНрогрокрпНрокро┐роХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН? (роО.роХро╛., родройро┐рокрпНрокроЯрпНроЯ, ро╡рпАроЯрпБ, роХро╛ро░рпН)",
        "роЙроЩрпНроХро│ро┐роЯроорпН роПро▒рпНроХройро╡рпЗ роХроЯройрпНроХро│рпН роЙро│рпНро│ройро╡ро╛? роЖроорпН роОройро┐ро▓рпН, родрпКроХрпИропрпИ роХрпБро▒ро┐рокрпНрокро┐роЯро╡рпБроорпНуАВ",
        "роЪро░ро┐ропро╛роХ! роЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпН роЖродро╛ро░рпН, рокро╛ройрпН, роЕро▓рпНро▓родрпБ ро╡ро░рпБрооро╛рой роЪро╛ройрпНро▒рпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпНуАВ",
      ],
      videoUrl: "https://www.youtube.com/watch?v=ysz5S6PUM-U", // Same placeholder
    },
  };

  const [currentStep, setCurrentStep] = useState(0);
  const [isRecording, setIsRecording] = useState(false);
  const [videoBlob, setVideoBlob] = useState<Blob | null>(null);
  const [documentImage, setDocumentImage] = useState<File | null>(null);
  const [extractedData, setExtractedData] = useState<any>(null);
  const [responses, setResponses] = useState<string[]>([]);
  const [result, setResult] = useState<string | null>(null);
  const [language, setLanguage] = useState<"en" | "hi" | "ta">("en");
  const webcamRef = useRef<Webcam>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);

  const currentLanguage = languageData[language];

  const handleNext = () => {
    if (currentStep < currentLanguage.questions.length - 1) {
      setResponses([...responses, "Sample response"]);
      setCurrentStep(currentStep + 1);
      setVideoBlob(null);
      setDocumentImage(null);
      setExtractedData(null);
    } else {
      evaluateEligibility();
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
      setVideoBlob(null);
      setDocumentImage(null);
      setExtractedData(null);
    }
  };

  const startRecording = () => {
    const stream = webcamRef.current?.stream;
    if (stream) {
      mediaRecorderRef.current = new MediaRecorder(stream);
      const chunks: Blob[] = [];

      mediaRecorderRef.current.ondataavailable = (e) => chunks.push(e.data);
      mediaRecorderRef.current.onstop = () => {
        const blob = new Blob(chunks, { type: "video/webm" });
        setVideoBlob(blob);
      };

      mediaRecorderRef.current.start();
      setIsRecording(true);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const handleDocumentUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setDocumentImage(file);
      setExtractedData({
        name: "John Doe",
        dob: "1990-05-15",
        income: "50000",
        employmentType: "Full-time",
      });
    }
  };

  const evaluateEligibility = () => {
    const income = parseInt(extractedData?.income || "0");
    const employmentDuration = parseInt(responses[1] || "0");
    const existingLoans = parseInt(responses[3] || "0");

    if (income < 30000) {
      setResult(
        language === "en"
          ? "тЭМ Rejected: Income below minimum requirement (тВ╣30,000)."
          : language === "hi"
          ? "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд: рдЖрдп рдиреНрдпреВрдирддрдо рдЖрд╡рд╢реНрдпрдХрддрд╛ (тВ╣30,000) рд╕реЗ рдХрдо рд╣реИред"
          : "тЭМ роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: ро╡ро░рпБрооро╛ройроорпН роХрпБро▒рпИроирпНродрокроЯрпНроЪ родрпЗро╡рпИропрпИ ро╡ро┐роЯ роХрпБро▒рпИро╡рпБ (тВ╣30,000)."
      );
    } else if (employmentDuration < 1) {
      setResult(
        language === "en"
          ? "тЭМ Rejected: Employment duration too short (minimum 1 year)."
          : language === "hi"
          ? "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд: рд░реЛрдЬрдЧрд╛рд░ рдЕрд╡рдзрд┐ рдмрд╣реБрдд рдХрдо рд╣реИ (рдиреНрдпреВрдирддрдо 1 рд╡рд░реНрд╖)ред"
          : "тЭМ роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ роХро╛ро▓роорпН рооро┐роХроХрпН роХрпБро▒рпИро╡рпБ (роХрпБро▒рпИроирпНродрокроЯрпНроЪроорпН 1 роЖрогрпНроЯрпБ)."
      );
    } else if (existingLoans > income * 0.5) {
      setResult(
        language === "en"
          ? "тЭМ Rejected: Existing loans exceed 50% of income."
          : language === "hi"
          ? "тЭМ рдЕрд╕реНрд╡реАрдХреГрдд: рдореМрдЬреВрджрд╛ рдЛрдг рдЖрдп рдХрд╛ 50% рд╕реЗ рдЕрдзрд┐рдХ рд╣реИрдВред"
          : "тЭМ роиро┐ро░ро╛роХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: родро▒рпНрокрпЛродрпИроп роХроЯройрпНроХро│рпН ро╡ро░рпБрооро╛ройродрпНродро┐ройрпН 50% роР ро╡ро┐роЯ роЕродро┐роХроорпН."
      );
    } else if (!extractedData) {
      setResult(
        language === "en"
          ? "ЁЯФД More Info Needed: Please upload valid documents."
          : language === "hi"
          ? "ЁЯФД рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдЪрд╛рд╣рд┐рдП: рдХреГрдкрдпрд╛ рд╡реИрдз рджрд╕реНрддрд╛рд╡реЗрдЬ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВред"
          : "ЁЯФД роорпЗро▓рпБроорпН родроХро╡ро▓рпН родрпЗро╡рпИ: роЪро░ро┐ропро╛рой роЖро╡рогроЩрпНроХро│рпИ рокродро┐ро╡рпЗро▒рпНро▒ро╡рпБроорпН."
      );
    } else {
      setResult(
        language === "en"
          ? "тЬЕ Approved: Congratulations, youтАЩre eligible for a loan!"
          : language === "hi"
          ? "тЬЕ рд╕реНрд╡реАрдХреГрдд: рдмрдзрд╛рдИ рд╣реЛ, рдЖрдк рдЛрдг рдХреЗ рд▓рд┐рдП рдкрд╛рддреНрд░ рд╣реИрдВ!"
          : "тЬЕ роЕроЩрпНроХрпАроХро░ро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ: ро╡ро╛ро┤рпНродрпНродрпБроХрпНроХро│рпН, роирпАроЩрпНроХро│рпН роХроЯройрпБроХрпНроХрпБ родроХрпБродро┐ропро╛ройро╡ро░рпН!"
      );
    }
  };

  if (result) {
    return (
      <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center py-8">
        <h1 className="text-3xl font-bold text-blue-600 mb-6">
          {language === "en"
            ? "Loan Application Result"
            : language === "hi"
            ? "рдЛрдг рдЖрд╡реЗрджрди рдкрд░рд┐рдгрд╛рдо"
            : "роХроЯройрпН ро╡ро┐рогрпНрогрокрпНрок роорпБроЯро┐ро╡рпБ"}
        </h1>
        <div className="w-full max-w-2xl bg-white p-6 rounded-lg shadow-md text-center">
          <p className="text-lg text-gray-800 mb-4">{result}</p>
          <button
            onClick={() => {
              setResult(null);
              setCurrentStep(0);
              setResponses([]);
            }}
            className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
          >
            {language === "en"
              ? "Start Over"
              : language === "hi"
              ? "рдлрд┐рд░ рд╕реЗ рд╢реБрд░реВ рдХрд░реЗрдВ"
              : "роорпАрогрпНроЯрпБроорпН родрпКроЯроЩрпНроХрпБ"}
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center py-8">
      <h1 className="text-3xl font-bold text-blue-600 mb-6">
        {language === "en"
          ? "Loan Application"
          : language === "hi"
          ? "рдЛрдг рдЖрд╡реЗрджрди"
          : "роХроЯройрпН ро╡ро┐рогрпНрогрокрпНрокроорпН"}
      </h1>

      {/* Language Selector */}
      <div className="mb-6">
        <label className="mr-2 text-gray-700">Select Language:</label>
        <select
          value={language}
          onChange={(e) =>
            setLanguage(e.target.value as "en" | "hi" | "ta")
          }
          className="p-2 border border-gray-300 rounded"
        >
          <option value="en">English</option>
          <option value="hi">Hindi</option>
          <option value="ta">Tamil</option>
        </select>
      </div>

      {/* AI Manager Video */}
      <div className="w-full max-w-2xl mb-6">
        <div className="relative pt-[56.25%]">
          <ReactPlayer
            url={currentLanguage.videoUrl}
            width="100%"
            height="100%"
            controls={true}
            className="absolute top-0 left-0"
          />
        </div>
      </div>

      {/* Question and Response */}
      <div className="w-full max-w-2xl bg-white p-6 rounded-lg shadow-md">
        <p className="text-lg text-gray-800 mb-4">
          {currentLanguage.questions[currentStep]}
        </p>

        {currentStep < currentLanguage.questions.length - 1 ? (
          <>
            {/* Webcam for Recording */}
            <div className="mb-4">
              <Webcam
                audio={true}
                ref={webcamRef}
                width="100%"
                videoConstraints={{ width: 640, height: 480 }}
              />
            </div>

            {/* Recording Controls */}
            {!videoBlob ? (
              <div className="flex space-x-4 mb-4">
                <button
                  onClick={startRecording}
                  disabled={isRecording}
                  className="px-4 py-2 bg-red-600 text-white rounded disabled:bg-red-300 hover:bg-red-700 transition"
                >
                  {isRecording
                    ? language === "en"
                      ? "Recording..."
                      : language === "hi"
                      ? "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ..."
                      : "рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпБроХро┐ро▒родрпБ..."
                    : language === "en"
                    ? "Start Recording"
                    : language === "hi"
                    ? "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ рдХрд░реЗрдВ"
                    : "рокродро┐ро╡рпИ родрпКроЯроЩрпНроХрпБ"}
                </button>
                <button
                  onClick={stopRecording}
                  disabled={!isRecording}
                  className="px-4 py-2 bg-gray-600 text-white rounded disabled:bg-gray-300 hover:bg-gray-700 transition"
                >
                  {language === "en"
                    ? "Stop Recording"
                    : language === "hi"
                    ? "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд░реЛрдХреЗрдВ"
                    : "рокродро┐ро╡рпИ роиро┐ро▒рпБродрпНродрпБ"}
                </button>
              </div>
            ) : (
              <div className="mb-4">
                <video
                  src={URL.createObjectURL(videoBlob)}
                  controls
                  width="100%"
                />
                <button
                  onClick={() => setVideoBlob(null)}
                  className="mt-2 px-4 py-2 bg-yellow-600 text-white rounded hover:bg-yellow-700 transition"
                >
                  {language === "en"
                    ? "Re-record"
                    : language === "hi"
                    ? "рдлрд┐рд░ рд╕реЗ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ"
                    : "роорпАрогрпНроЯрпБроорпН рокродро┐ро╡рпБ роЪрпЖропрпН"}
                </button>
              </div>
            )}
          </>
        ) : (
          <>
            {/* Document Upload */}
            <input
              type="file"
              accept="image/*"
              onChange={handleDocumentUpload}
              className="mb-4"
            />
            {documentImage && (
              <div className="mb-4">
                <img
                  src={URL.createObjectURL(documentImage)}
                  alt="Uploaded Document"
                  className="w-full max-h-64 object-contain"
                />
              </div>
            )}
            {extractedData && (
              <div className="mb-4">
                <h3 className="text-lg font-semibold">
                  {language === "en"
                    ? "Extracted Data:"
                    : language === "hi"
                    ? "рдирд┐рдХрд╛рд▓рд╛ рдЧрдпрд╛ рдбреЗрдЯрд╛:"
                    : "рокро┐ро░ро┐родрпНродрпЖроЯрпБроХрпНроХрокрпНрокроЯрпНроЯ родро░ро╡рпБ:"}
                </h3>
                <p>
                  {language === "en"
                    ? "Name:"
                    : language === "hi"
                    ? "рдирд╛рдо:"
                    : "рокрпЖропро░рпН:"}{" "}
                  {extractedData.name}
                </p>
                <p>
                  {language === "en"
                    ? "DOB:"
                    : language === "hi"
                    ? "рдЬрдиреНрдо рддрд┐рдерд┐:"
                    : "рокро┐ро▒роирпНрод родрпЗродро┐:"}{" "}
                  {extractedData.dob}
                </p>
                <p>
                  {language === "en"
                    ? "Income:"
                    : language === "hi"
                    ? "рдЖрдп:"
                    : "ро╡ро░рпБрооро╛ройроорпН:"}{" "}
                  тВ╣{extractedData.income}
                </p>
                <p>
                  {language === "en"
                    ? "Employment Type:"
                    : language === "hi"
                    ? "рд░реЛрдЬрдЧрд╛рд░ рдкреНрд░рдХрд╛рд░:"
                    : "ро╡рпЗро▓рпИро╡ро╛ропрпНрокрпНрокрпБ ро╡роХрпИ:"}{" "}
                  {extractedData.employmentType}
                </p>
              </div>
            )}
          </>
        )}

        {/* Navigation */}
        <div className="flex justify-between">
          <button
            onClick={handleBack}
            disabled={currentStep === 0}
            className="px-4 py-2 bg-gray-400 text-white rounded disabled:bg-gray-200 hover:bg-gray-500 transition"
          >
            {language === "en"
              ? "Back"
              : language === "hi"
              ? "рдкреАрдЫреЗ"
              : "рокро┐ройрпНройро╛ро▓рпН"}
          </button>
          <button
            onClick={handleNext}
            disabled={
              currentStep === currentLanguage.questions.length - 1
                ? !documentImage
                : !videoBlob
            }
            className="px-4 py-2 bg-blue-600 text-white rounded disabled:bg-blue-300 hover:bg-blue-700 transition"
          >
            {currentStep === currentLanguage.questions.length - 1
              ? language === "en"
                ? "Submit"
                : language === "hi"
                ? "рдЬрдорд╛ рдХрд░реЗрдВ"
                : "роЪрооро░рпНрокрпНрокро┐"
              : language === "en"
              ? "Next"
              : language === "hi"
              ? "рдЕрдЧрд▓рд╛"
              : "роЕроЯрпБродрпНродрпБ"}
          </button>
        </div>
      </div>
    </div>
  );
}